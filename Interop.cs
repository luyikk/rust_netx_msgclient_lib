// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using rust_run;
#pragma warning restore 0105

namespace rust_run
{
    public static partial class Interop
    {
        public const string NativeLib = "netx_msgclient_lib";

        static Interop()
        {
            var api_version = Interop.my_api_guard();
            if (api_version != 5313379100334502205ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (5313379100334502205). You probably forgot to update / copy either the bindings or the library.");
            }
        }


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_api_guard")]
        public static extern ulong my_api_guard();


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "destroy")]
        public static extern NetXFFIError destroy(ref IntPtr context);

        public static void destroy_checked(ref IntPtr context) {
            var rval = destroy(ref context);;
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// new MessageClient obj
        /// config is json ServerOption
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "new_by_config")]
        public static extern NetXFFIError new_by_config(ref IntPtr context, string config);

        public static void new_by_config_checked(ref IntPtr context, string config) {
            var rval = new_by_config(ref context, config);;
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// init
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "init")]
        public static extern NetXFFIError init(IntPtr context);

        public static void init_checked(IntPtr context) {
            var rval = init(context);;
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// test connect
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "connect_test")]
        public static extern NetXFFIError connect_test(IntPtr context);

        public static void connect_test_checked(IntPtr context) {
            var rval = connect_test(context);;
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// login
        /// callback args:
        ///     success:bool
        ///     msg:string
        ///     ret:bool
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "login")]
        public static extern bool login(IntPtr context, string nickname, LogOnCallBack callback);


        /// get all online users
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "get_users")]
        public static extern NetXFFIError get_users(IntPtr context, GetUsersCallBack callback);

        public static void get_users_checked(IntPtr context, GetUsersCallBack callback) {
            var rval = get_users(context, callback);;
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct User
    {
        public string nickname;
        public long session_id;
    }

    public enum NetXFFIError
    {
        Ok = 0,
        NullPassed = 1,
        Panic = 2,
        AnyHowError = 3,
        NotConnect = 4,
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceUser
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceUser : IEnumerable<User>
    {
        public SliceUser(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceUser(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public User this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(User));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<User>(ptr);
            }
        }
        public User[] Copied
        {
            get
            {
                var rval = new User[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<User> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void GetUsersCallBack(SliceUser x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate bool LogOnCallBack(bool x0, string x1);


    /// netx message lib
    public partial class MessageClient : IDisposable
    {
        private IntPtr _context;

        private MessageClient() {}

        /// new MessageClient obj
        /// config is json ServerOption
        public static MessageClient NewByConfig(string config)
        {
            var self = new MessageClient();
            var rval = Interop.new_by_config(ref self._context, config);
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.destroy(ref _context);
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// init
        public void Init()
        {
            var rval = Interop.init(_context);
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// test connect
        public void ConnectTest()
        {
            var rval = Interop.connect_test(_context);
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        /// login
        /// callback args:
        ///     success:bool
        ///     msg:string
        ///     ret:bool
        public bool Login(string nickname, LogOnCallBack callback)
        {
            return Interop.login(_context, nickname, callback);
        }

        /// get all online users
        public void GetUsers(GetUsersCallBack callback)
        {
            var rval = Interop.get_users(_context, callback);
            if (rval != NetXFFIError.Ok)
            {
                throw new InteropException<NetXFFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
